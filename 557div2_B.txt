B. Double Matrix
time limit per test1 second
memory limit per test256 megabytes
inputstandard input
outputstandard output
You are given two n×mn×m matrices containing integers. A sequence of integers is strictly increasing if each next number is greater than the previous one. A row is strictly increasing if all numbers from left to right are strictly increasing. A column is strictly increasing if all numbers from top to bottom are strictly increasing. A matrix is increasing if all rows are strictly increasing and all columns are strictly increasing.

For example, the matrix [91110121114][91011111214] is increasing because each individual row and column is strictly increasing. On the other hand, the matrix [1213][1123] is not increasing because the first row is not strictly increasing.

Let a position in the ii-th row (from top) and jj-th column (from left) in a matrix be denoted as (i,j)(i,j).

In one operation, you can choose any two numbers ii and jj and swap the number located in (i,j)(i,j) in the first matrix with the number in (i,j)(i,j) in the second matrix. In other words, you can swap two numbers in different matrices if they are located in the corresponding positions.

You would like to make both matrices increasing by performing some number of operations (possibly none). Determine if it is possible to do this. If it is, print "Possible", otherwise, print "Impossible".

Input
The first line contains two integers nn and mm (1≤n,m≤501≤n,m≤50) — the dimensions of each matrix.

Each of the next nn lines contains mm integers ai1,ai2,…,aimai1,ai2,…,aim (1≤aij≤1091≤aij≤109) — the number located in position (i,j)(i,j) in the first matrix.

Each of the next nn lines contains mm integers bi1,bi2,…,bimbi1,bi2,…,bim (1≤bij≤1091≤bij≤109) — the number located in position (i,j)(i,j) in the second matrix.

Output
Print a string "Impossible" or "Possible".


INF:

for such questions, with many possibilities of configurations and mostly asking whether possible or not, never forget to look at whether any generalized configurations are available for 
every test case. Also, u spent a lot of time to cover the edge case exceptions and wayy too much code. Another veerrryyyy important point..ensure what is asked as the output, what are the 
criterias and constraints of the question carefully.(you did a dumbassery and assumed n and m has a min of 2...evern without that you were having to deal with all kinds of edge cases
coz you didnt think of comparing only a[i][j] with a[i-1][j] and a[i][j-1] and b[i][j] with b[i-1][j] and b[i][j-1] alone...that cost you a hell lot)..dont forget to optimise the code bruvv...)